[
["introduction-to-data-analytics.html", "Chapter 1 Introduction to Data Analytics 1.1 Loading and Inspecting Data Sets 1.2 Statistical Summaries 1.3 Graphical Summaries", " Chapter 1 Introduction to Data Analytics In this chapter, we will get acclimated to working with data using a suite of packages in R called the tidyverse.1 1.1 Loading and Inspecting Data Sets The following line of code reads in a data set that contains weekly prices, promotional activity, and sales for 20 different brands of beer. The data set comes from many stores within one Chicago grocery retail chain – Dominick’s Finer Foods – and spans more than five years of transactions. The complete raw data are publically available from the Kilts Center for Marketing at the University of Chicago.2 beer = read_csv(&quot;beer.csv&quot;) We always want to view the data after importing to make sure all the values were read-in correctly. To inspect the first few lines of a data set, use the head( ) command. head(beer) store upc week move price sale profit brand packsize itemsize units 86 1820000016 91 23 3.49 NA 19.05 BUDWEISER BEER 6 12 oz 86 1820000784 91 9 3.79 NA 28.23 O’DOUL’S N/A LONGNEC 6 12 oz 86 1820000834 91 9 3.69 NA 22.03 BUDWEISER BEER LONG 6 12 oz 86 1820000987 91 78 3.29 B 5.78 MICHELOB REGULAR BEE 6 12 oz 86 3410000354 91 35 3.69 NA 22.98 MILLER LITE BEER 6 12 oz 86 3410000554 91 12 3.69 NA 22.98 MILLER GENUINE DRAFT 6 12 oz We can see that our data set contains 11 different variables (i.e., columns). A brief summary of each variable is provided below. store: unique store ID number upc: Universal Product Code week: week ID number move: number of units sold price: retail price in US dollars sale: indicator of promotional activity profit: gross profit margin brand: brand name packsize: number of items in one package itemsize: size of items in one package units: units of items 1.2 Statistical Summaries We can compute summary statistics in the tidyverse by combining the summarise operator with any one (or many!) of R’s built-in statistics functions. A few of the most common are listed below. Statistic R Function mean mean( ) median median( ) variance var( ) standard deviation sd( ) correlation cor( ) For example, let’s compute the average price across all products and weeks. beer %&gt;% summarise(mean(price)) ## # A tibble: 1 x 1 ## `mean(price)` ## &lt;dbl&gt; ## 1 4.28 Now suppose we wanted to find the average price for only one brand of beer, say Budweiser. To do this, we can use the filter( ) operator to select rows in the data that satisfy certain conditions. Here we want Budweiser beers so the condition is that brand is equal to BUDWEISER BEER, or brand==&quot;BUDWEISER BEER&quot;. Note that a double equals sign == is always used when writing logical statements to check equality. beer %&gt;% filter(brand==&quot;BUDWEISER BEER&quot;) %&gt;% summarise(mean(price)) ## # A tibble: 1 x 1 ## `mean(price)` ## &lt;dbl&gt; ## 1 3.81 To compute summary statistics for multiple brands, we can use the group_by( ) operator. As the name suggests, this operator tells R to first group by a certain categorical variable, and to compute a summary for each level that the given variable takes on. beer %&gt;% group_by(brand) %&gt;% summarise(mean(price)) ## # A tibble: 19 x 2 ## brand `mean(price)` ## &lt;chr&gt; &lt;dbl&gt; ## 1 BECK&#39;S REG BEER NR B 5.88 ## 2 BERGHOFF REGULAR BEE 3.94 ## 3 BUDWEISER BEER 3.81 ## 4 BUDWEISER BEER LONG 3.75 ## 5 CORONA EXTRA BEER NR 5.80 ## 6 HEINEKEN BEER N.R.BT 6.34 ## 7 LOWENBRAU BEER NR BT 4.05 ## 8 MICHELOB REGULAR BEE 4.04 ## 9 MILLER GEN DRFT LNNR 3.69 ## 10 MILLER GEN DRFT LT L 3.69 ## 11 MILLER GENUINE DRAFT 3.78 ## 12 MILLER HIGH LIFE LNN 3.68 ## 13 MILLER LITE BEER 3.82 ## 14 MILLER LITE BEER N.R 3.74 ## 15 MILLER LITE LONGNECK 3.69 ## 16 MILLER SHARP&#39;S N/A L 3.36 ## 17 O&#39;DOUL&#39;S N/A LONGNEC 3.78 ## 18 OLD STYLE BEER 3.68 ## 19 SAMUEL ADAMS LAGER N 5.41 We can also easily extend the code above to compute multiple summary statistics across groups. beer %&gt;% group_by(brand) %&gt;% summarise(mean(price), mean(move)) ## # A tibble: 19 x 3 ## brand `mean(price)` `mean(move)` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 BECK&#39;S REG BEER NR B 5.88 18.3 ## 2 BERGHOFF REGULAR BEE 3.94 15.6 ## 3 BUDWEISER BEER 3.81 16.3 ## 4 BUDWEISER BEER LONG 3.75 18.2 ## 5 CORONA EXTRA BEER NR 5.80 15.4 ## 6 HEINEKEN BEER N.R.BT 6.34 16.7 ## 7 LOWENBRAU BEER NR BT 4.05 16.9 ## 8 MICHELOB REGULAR BEE 4.04 14.2 ## 9 MILLER GEN DRFT LNNR 3.69 51.0 ## 10 MILLER GEN DRFT LT L 3.69 20.1 ## 11 MILLER GENUINE DRAFT 3.78 16.4 ## 12 MILLER HIGH LIFE LNN 3.68 14.1 ## 13 MILLER LITE BEER 3.82 18.1 ## 14 MILLER LITE BEER N.R 3.74 18.7 ## 15 MILLER LITE LONGNECK 3.69 38.4 ## 16 MILLER SHARP&#39;S N/A L 3.36 11.5 ## 17 O&#39;DOUL&#39;S N/A LONGNEC 3.78 12.0 ## 18 OLD STYLE BEER 3.68 13.4 ## 19 SAMUEL ADAMS LAGER N 5.41 20.6 1.3 Graphical Summaries Data visualization is one of the strengths of the tidyverse. A fairly exhaustive list of graph types can be found at https://www.r-graph-gallery.com. For our purposes, we will start with a few of the most commonly used graphs. Graph Operator histogram geom_histogram( ) box plot geom_boxplot( ) bar plot geom_bar( ) line plot geom_line( ) scatter plot geom_point( ) Let’s start be looking at the distribution of weekly prices across all products. beer %&gt;% ggplot(aes(x=price)) + geom_histogram() + labs(title=&quot;Distribution of Weekly Prices&quot;) This is an example of a histogram. The variable on the x-axis (price) is split into different bins, and the y-axis counts the number of observations that fall withiin each bin. We can also inspect the distribution of a variable like prices using a boxplot. beer %&gt;% ggplot(aes(y=price)) + geom_boxplot() + labs(title=&quot;Distribution of Weekly Prices&quot;) Notice that the focal variable of interest is now on the y-axis. The rectangular box shown in the middle of the plot indicates three key summary statistics: the bottom line is the 25th percentile, the middle line is the 50th percentile (or median), and the top line is the 75th percentile. The vertical line starting around 2.5 and ending around 7 indicates the full range of prices in the data. The figure above shows the distribution of prices across all prodcuts. However, we may want to explore whether the distribution of prices is different across products. This can be done by defining x=brand within the ggplot( ) function. beer %&gt;% ggplot(aes(x=brand, y=price)) + geom_boxplot() + labs(title=&quot;Distribution of Weekly Prices&quot;) We have succeeded in creating a box plot for each brand, but the brand labels are impossible to read! As easy fix is to rotate the x-axis labels, which can be controlled using the theme() operator. The theme() operator is generally what we use to change plot formatting, such as the size of the axis labels or the position of the title. beer %&gt;% ggplot(aes(x=brand, y=price)) + geom_boxplot() + labs(title=&quot;Distribution of Weekly Prices&quot;) + theme(axis.text.x = element_text(angle=90, hjust=1), plot.title = element_text(hjust=0.5)) Much better! Next, let’s explore the variation of prices over time. We can make a time series plot (or line plot) to do this, where we specify group=brand so that R makes a separate line for each brand. beer %&gt;% ggplot(aes(x=week, y=price, group=brand)) + geom_line() + labs(title=&quot;Beer Prices over Time&quot;) + theme(plot.title = element_text(hjust=0.5)) This was a good attempt, but the plot is not especially useful! While we do notice that the prices are changing over time, we can’t identify the products themselves so we don’t know which products are changing more or less than others. We can fix this in a couple ways. The first thing we will try is to simply add color to the plot above, so that we can identify a product by the color of its line. beer %&gt;% ggplot(aes(x=week, y=price, group=brand, color=brand)) + geom_line() + labs(title=&quot;Beer Prices over Time&quot;) + theme(plot.title = element_text(hjust=0.5)) This is better, but it is still hard to identify products because of how much overlap there is in prices. So maybe the best thing to do is create a separate plot for each brand. This can be easily accomplished using facet_wrap( ). beer %&gt;% ggplot(aes(x=week,y=price,group=brand,color=brand)) + geom_line(show.legend=FALSE) + labs(title=&quot;Beer Prices over Time&quot;) + facet_wrap(brand ~ .) + theme(plot.title = element_text(hjust=0.5), strip.text.x = element_text(size=6)) Note that we added show.legend=FALSE to geom_line( ) since we no longer need the color to identify products. We also added an option to theme( ) to control the size of the text to ensure that the labels are all legible. Finally, let’s explore the relationship between two variables like price and demand. beer %&gt;% ggplot(aes(x=price, y=move)) + geom_point() + labs(title=&quot;Beer Prices over Time&quot;) + theme(plot.title = element_text(hjust=0.5)) This figure matches our intuition from economics, which is that as price increases, demand seems to fall. We can even imagine a line going through these points – this line would be a demand curve! As before, it would be interesting to know how the relationship between price and demand changes across products. Let’s apply the same techniques above – adding color and using separate plots – to investigate. beer %&gt;% ggplot(aes(x=price, y=move, color=brand)) + geom_point() + labs(title=&quot;Price vs. Demand&quot;) + theme(plot.title = element_text(hjust=0.5)) beer %&gt;% ggplot(aes(x=price, y=move, color=brand)) + geom_point(show.legend=FALSE) + labs(title=&quot;Price vs. Demand&quot;) + facet_wrap(brand~.,scales=&quot;free&quot;) + theme(plot.title = element_text(hjust=0.5), strip.text.x = element_text(size=6)) These last two plots indeed show that demand is negatively related to price (as price increases, demand falls) and that the magnitude of this relationship may change across products. https://www.tidyverse.org/↩ https://www.chicagobooth.edu/research/kilts/datasets/dominicks↩ "]
]
